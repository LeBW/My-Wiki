(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{381:function(t,s,e){t.exports=e.p+"assets/img/filter-intecepter.2e82ff1d.png"},382:function(t,s,e){t.exports=e.p+"assets/img/request-process.565d3003.png"},497:function(t,s,e){"use strict";e.r(s);var a=e(45),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"过滤器-监听器-拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器-监听器-拦截器"}},[t._v("#")]),t._v(" 过滤器，监听器，拦截器")]),t._v(" "),a("p",[t._v("讲讲 过滤器（Filter），监听器（listener），拦截器（interceptor）。")]),t._v(" "),a("p",[t._v("首先通过两张图看看 过滤器 和 拦截器 之间的关系。\n"),a("img",{attrs:{src:e(381),alt:"filter-intecepter"}}),t._v(" "),a("img",{attrs:{src:e(382),alt:"request-process"}})]),t._v(" "),a("h2",{attrs:{id:"过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),a("p",[t._v("过滤器（Filter）是 Servlet 中的概念，是指实现了 "),a("code",[t._v("javax.servlet.Filter")]),t._v(" 接口的服务器端程序，主要用途是过滤字符编码，做一些业务逻辑判断等。其工作原理是：在 web.xml 中配置好要拦截的客户端请求，此时就可以对请求或响应（Request，Response）设置统一编码，简化操作。\nFilter 随着 web应用的启动而启动，只初始化一次。")]),t._v(" "),a("p",[t._v("过滤器是在请求进入 Tomcat 容器之后，但请求进入 Servlet 之前进行预处理的。使用 Filter 的完整流程是：Filter 对用户请求进行预处理，接着将请求交给 Servlet 进行处理并生成响应，最后 Filter 再对服务器响应进行后处理。")]),t._v(" "),a("p",[t._v("在上一章 Tomcat 中有讲到过 Filter 的具体接口，因此这里略过。")]),t._v(" "),a("p",[t._v("过滤器是基于 "),a("strong",[t._v("函数回调")]),t._v(" 进行工作的。")]),t._v(" "),a("h2",{attrs:{id:"监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听器"}},[t._v("#")]),t._v(" 监听器")]),t._v(" "),a("p",[t._v("监听器（Listener）也是 Servlet 中的概念，它也是随着 Web 应用的启动而启动，只初始化一次，随 Web应用的停止而摧毁，可以用来监听 servletContext，HttpSession，ServletRequest 等域对象的创建和销毁，以及属性发生更改等事件，用于在事件发生前后做一些必要的处理。例如，可以用来：1. 统计在线人数和在线用户。2. 统计网站访问量 等。")]),t._v(" "),a("p",[t._v("在 Servlet 中定义了一些常用的监听器接口：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("javax.servlet.ServletContextListener")])]),t._v(" "),a("li",[a("code",[t._v("javax.servlet.ServletRequestListener")])]),t._v(" "),a("li",[a("code",[t._v("javax.servlet.http.HttpSessionListener")])])]),t._v(" "),a("p",[t._v("Servlet 规范中")]),t._v(" "),a("ul",[a("li",[t._v("实现 "),a("code",[t._v("ServletContextListener")]),t._v(" 的类可以在 Web 容器中上下文状态改变（创建或者销毁）时，收到消息，进行相应的处理。")]),t._v(" "),a("li",[t._v("实现 "),a("code",[t._v("ServletRequestListener")]),t._v("的类可以在请求进出 Web容器时收到消息，进行相应的处理。")]),t._v(" "),a("li",[t._v("实现 "),a("code",[t._v("HttpSessionListener")]),t._v("的类可以在 Web 容器中Session会话改变（创建或销毁）时，收到消息，进行相应的处理。（例如上面说的获取网站在线人数就可以用这个接口实现）")])]),t._v(" "),a("h2",{attrs:{id:"拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截器"}},[t._v("#")]),t._v(" 拦截器")]),t._v(" "),a("p",[t._v("拦截器（Interceptor）是 Spring 里面的概念，是 Spring 框架支持的一种机制，主要是通过 "),a("code",[t._v("HandlerInterceptor")]),t._v(" 接口来实现的。实现该接口的类注册到 Spring 容器内后，可以对相应的URL进行拦截操作，可以实现 日志，安全 等操作。")]),t._v(" "),a("p",[a("code",[t._v("HandlerInterceptor")]),t._v(" 中有以下几个接口：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerInterceptor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServeltRequest")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Nullalbe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" modelAndView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterCompletion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Nullable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果我们要使用拦截器对请求进行拦截，做以下两个事情即可：")]),t._v(" "),a("ol",[a("li",[t._v("编写拦截器类，继承 "),a("code",[t._v("HandlerInterceptor")]),t._v("接口。")]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("WebMvcConfigurerAdapter")]),t._v(" 类中重写 "),a("code",[t._v("addInterceptors")]),t._v(" 方法，添加我们的拦截器类。")])]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyWebAppConfigurer")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebMvcConfigurerAdapter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    publicvoid "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterceptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterceptorRegistry")]),t._v(" registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多个拦截器组成一个拦截器链")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// addPathPatterns 用于添加拦截规则")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// excludePathPatterns 用户排除拦截")]),t._v("\n        registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterceptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInterceptor1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addPathPatterns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/**"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterceptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInterceptor2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addPathPatterns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/**"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterceptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"拦截器的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截器的实现原理"}},[t._v("#")]),t._v(" 拦截器的实现原理")]),t._v(" "),a("p",[t._v("Spring 中的 "),a("code",[t._v("dispatchServlet")]),t._v(" 在对请求进行处理匹配的时候，会逐一尝试所有的 "),a("code",[t._v("handlerMapping")]),t._v("，直至找到能够处理该请求的handler，就返回相对应的 "),a("code",[t._v("handlerExecutionChain")]),t._v("。")]),t._v(" "),a("p",[t._v("我们看一下 "),a("code",[t._v("HandlerExecutionChain")]),t._v(" 这个类的结构，可以发现其中有个字段是 "),a("code",[t._v("private HandlerInterceptor[] interceptors")]),t._v("，其中就包含了该handler的所有拦截器。")]),t._v(" "),a("p",[t._v("然后我们接着看一下 "),a("code",[t._v("dispatchServlet")]),t._v(" 中的 "),a("code",[t._v("doDispatch")]),t._v(" 方法，可以看到其中对 handler 的一系列处理逻辑，例如首先调用拦截器的 "),a("code",[t._v("preHandle")]),t._v(" 方法，然后真正调用 handler 对请求进行处理，然后调用拦截器的 "),a("code",[t._v("postHandle")]),t._v("方法，最后调用 "),a("code",[t._v("afterCompletion")]),t._v("方法（即使处理过程中出现了异常，还是会调用"),a("code",[t._v("afterCompletion")]),t._v("方法）。")])])}),[],!1,null,null,null);s.default=n.exports}}]);