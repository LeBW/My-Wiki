(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{383:function(t,s,a){t.exports=a.p+"assets/img/enableautoconfiguration.438fe6e8.png"},384:function(t,s,a){t.exports=a.p+"assets/img/spring-factories-loader.685a0c01.jpeg"},385:function(t,s,a){t.exports=a.p+"assets/img/spring-boot-import.de557d39.png"},386:function(t,s,a){t.exports=a.p+"assets/img/configuration-annotation-process.7786e550.png"},387:function(t,s,a){t.exports=a.p+"assets/img/before-register-post-processor.41f58ac6.png"},388:function(t,s,a){t.exports=a.p+"assets/img/after-register-post-processor.c4b395d8.png"},499:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"spring-boot启动流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot启动流程"}},[t._v("#")]),t._v(" Spring Boot启动流程")]),t._v(" "),n("p",[t._v("开发一个 Spring Boot 项目，都会用到如下启动类")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Application")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Application")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("从中可以看出，关键部分有两个，一个是第 1 行的注解 "),n("code",[t._v("@SpringBootApplication")]),t._v("，一个是第 5 行的 "),n("code",[t._v("SpringApplication.run(...)")]),t._v("。\n所以要了解 Spring Boot 的启动流程，从这两位入手就可以了。")]),t._v(" "),n("p",[t._v("下面氛围两部分：")]),t._v(" "),n("ol",[n("li",[t._v("第一部分，从 "),n("code",[t._v("@SpringBootApplication")]),t._v(" 入手，从注解的角度看看 SpringBoot 的关键注解。")])]),t._v(" "),n("blockquote",[n("p",[t._v("注意，在 Java 中，注解只是起到标注的作用，可以理解为一种特殊的 comment，为 类/方法 进行特定标注，本身并不执行代码。真正使注解起作用的，是第二部分的启动过程，利用反射，读取类的注解并进行相应操作。")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("第二部分，从 "),n("code",[t._v("SpringApplication.run()")]),t._v(" 入手，了解真实的启动过程。")])]),t._v(" "),n("h2",{attrs:{id:"springbootapplication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[t._v("#")]),t._v(" @SpringBootApplication")]),t._v(" "),n("p",[n("code",[t._v("@SpringBootApplication")]),t._v(" 是 SpringBoot 应用的核心注解，它其实是一个组合注解：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootConfiguration")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableAutoConfiguration")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ComponentScan")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("excludeFilters "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CUSTOM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypeExcludeFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CUSTOM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationExcludeFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringBootApplication")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("虽然使用了多个 Annotation 进行原信息标注，但是其中重要的只有三个：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("@Configuration")]),t._v("（点开"),n("code",[t._v("@SpringBootConfiguration")]),t._v("会发现里面还是用了"),n("code",[t._v("@Configuration")]),t._v("）")]),t._v(" "),n("li",[n("code",[t._v("@EnableAutoConfiguration")])]),t._v(" "),n("li",[n("code",[t._v("@ComponentScan")])])]),t._v(" "),n("p",[t._v("下面分别介绍这三个注解。")]),t._v(" "),n("h3",{attrs:{id:"configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" @Configuration")]),t._v(" "),n("p",[t._v("这里的 "),n("code",[t._v("@Configuration")]),t._v(" 对我们来说应该不陌生，他就是 JavaConfig 形式的 Spring IoC 容器的配置类使用的那个 "),n("code",[t._v("@Configuration")]),t._v("。")]),t._v(" "),n("p",[t._v("所以，这里的启动类标注了 "),n("code",[t._v("@Configuration")]),t._v(" 后，本身其实也是一个 IoC 容器的配置类。")]),t._v(" "),n("h3",{attrs:{id:"componentscan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[t._v("#")]),t._v(" @ComponentScan")]),t._v(" "),n("p",[t._v("这个注解在 Spring 中非常重要，它对应 XML 配置中的元素。"),n("code",[t._v("@ComponentScan")]),t._v(" 的功能其实就是自动扫描并加载符合条件的组件（比如 "),n("code",[t._v("@Component")]),t._v(" 和 "),n("code",[t._v("@Repository")]),t._v(" 等）或者 Bean 定义，最终将这些 Bean 定义加载到 IoC 容器中。")]),t._v(" "),n("p",[t._v("我们可以通过 basPackages 等属性来细粒度定制 @ComponentScan 自动扫描的范围。如果不指定，则 Spring 会默认从声明 @ComponentScan 所在类的 package 进行扫描。")]),t._v(" "),n("blockquote",[n("p",[t._v("所以 Spring Boot 的启动类最好是放在 root package 下，防止自动扫描范围不对。")])]),t._v(" "),n("h3",{attrs:{id:"enableautoconfiguration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration"}},[t._v("#")]),t._v(" @EnableAutoConfiguration")]),t._v(" "),n("p",[t._v("这个注解同样非常重要，它主要是借助 @Import 的支持，将所有符合自动配置条件的 bean 定义加载到 IoC 容器中。")]),t._v(" "),n("p",[n("code",[t._v("@EnableAutoConfiguration")]),t._v(" 作为一个复合注解，其自身定义关键信息如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AutoConfigurationPackage")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationImportSelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfiguration")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("其中最关键的就是 "),n("code",[t._v("@Import(AutoConfigurationImportSelector.class)")]),t._v("，借助 "),n("code",[t._v("@AutoConfigurationImportSelector")]),t._v("，可以帮助 Spring Boot 应用将所有符合条件的 "),n("code",[t._v("@Configuration")]),t._v(" 配置都加载到当前 IoC 容器中。\n就像一只“八爪鱼”一样，借助 Spring 框架原有的一个工具类：SpringFactoriesLoader 的支持，"),n("code",[t._v("@EnableAutoConfiguration")]),t._v(" 可以智能的自动配置功效才大功告成。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(383),alt:"EnableAutoConfiguration"}})]),t._v(" "),n("p",[t._v("上面提到的 SpringFactoriesLoader 在 Spring 中用到的地方非常多，其主要功能就是从指定的配置文件 "),n("code",[t._v("META-INF/spring.factories")]),t._v(" 中加载配置。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringFactoriesLoader")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadFactories")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" factoryClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" classLoader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadFactoryNames")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" factoryClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" classLoader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("配合 "),n("code",[t._v("@EnableAutoConfiguration")]),t._v(" 使用时，它提供了一种配置查找的功能支持，即根据 "),n("code",[t._v("@EnableAutoConfiguration")]),t._v(" 的完整类名 "),n("code",[t._v("org.springframework.boot.autoconfigure.EnableAutoConfiguration")]),t._v(" 作为查找的 key，获取对应的一组 "),n("code",[t._v("@Configuration")]),t._v(" 类。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(384),alt:"SpringFactoriesLoader"}})]),t._v(" "),n("p",[t._v("上图是从 Spring Boot 的 autoconfigure 依赖包中的 "),n("code",[t._v("META-INF/spring.factories")]),t._v(" 中摘录的一段内容，可以很好的说明问题。")]),t._v(" "),n("p",[t._v("所以，"),n("code",[t._v("@EnableAutoConfiguration")]),t._v(" 自动配置的魔法其实是：")]),t._v(" "),n("ul",[n("li",[t._v("从 classpath 中搜寻所有的 "),n("code",[t._v("META-INF/spring.factories")]),t._v(" 配置文件，并将其中 "),n("code",[t._v("org.springframework.boot.autoconfigure.EnableutoConfiguration")]),t._v(" 对应的配置项通过反射（Java Refletion）实例化为对应的标注了 "),n("code",[t._v("@Configuration")]),t._v(" 的 JavaConfig 形式的 IoC 容器配置类，然后汇总并加载到 IoC 容器.")])]),t._v(" "),n("p",[t._v("相关代码可以从 "),n("code",[t._v("AutoConfigurationImportSelector.getCandidateConfigurations()")]),t._v(" 中看出端倪：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCandidateConfigurations")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationMetadata")]),t._v(" metadata"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationAttributes")]),t._v(" attributes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里就是利用 SpringFactoiresLoader 从 spring.factories 中读取 @EnableAutoConfiguration 的类")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" configurations "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringFactoriesLoader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadFactoryNames")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpringFactoriesLoaderFactoryClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanClassLoader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("notEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configurations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No auto configuration classes found in META-INF/spring.factories. If you "')]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"are using a custom packaging, make sure that file is correct."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" configurations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("具体细节在第二部分介绍。")]),t._v(" "),n("h2",{attrs:{id:"启动流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动流程"}},[t._v("#")]),t._v(" 启动流程")]),t._v(" "),n("p",[t._v("SpringBoot 应用的 main 函数一般是")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringBootExampleApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("点进 run 函数，可以发现关键代码为：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" primarySources"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primarySources"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("从中可以看出，SpringBoot 的启动过程从大体上可以分为两步：")]),t._v(" "),n("ul",[n("li",[t._v("创建 SpringApplication，即 "),n("code",[t._v("new SpringApplication(primarySources)")]),t._v(" 的过程。")]),t._v(" "),n("li",[t._v("运行 SpringApplication，即 "),n("code",[t._v(".run(args)")]),t._v(" 的过程。\n下面分别讲讲两部分")])]),t._v(" "),n("h3",{attrs:{id:"创建-springapplication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建-springapplication"}},[t._v("#")]),t._v(" 创建 SpringApplication")]),t._v(" "),n("p",[t._v("创建 SpringApplication 的过程主要代码为：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResourceLoader")]),t._v(" resourceLoader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" primarySources"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resourceLoader "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" resourceLoader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("notNull")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primarySources"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PrimarySources must not be null"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// primarySources 一般为应用的主类，在这里就是上面的 SpringBootExampleApplication 类")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("primarySources "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashSet")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primarySources"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deduceFromClasspath() 主要使用 Class.isPresent() 来判断当前应用的类型（Reactive 还是 Servlet）")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("webApplicationType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebApplicationType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deduceFromClasspath")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getSpringFactoriesInstances(Class<T> type) 函数主要是利用 SpringFactoriesLoader 去 META-INF/spring.factories 中寻找 key 为 type 的类，并对其实例化")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化 key 为 org.springframework.boot.BootstrapRegistryInitializer 的类")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bootstrapRegistryInitializers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpringFactoriesInstances")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BootstrapRegistryInitializer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化 key 为 org.springframework.context.ApplicationContextInitializer 的类")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInitializers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpringFactoriesInstances")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContextInitializer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化 key 为 org.springframework.context.ApplicationListener 的类")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setListeners")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpringFactoriesInstances")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用方法调用栈，寻找方法名为 main 的方法，并将其对应的类作为主类")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mainApplicationClass "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deduceMainApplicationClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("简单来说，这一步做的是将一些关键信息保存在 SpringApplication 的属性中，为后面做准备。")]),t._v(" "),n("h3",{attrs:{id:"run-运行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-运行过程"}},[t._v("#")]),t._v(" run（运行过程）")]),t._v(" "),n("p",[t._v("运行过程的主要代码在 SpringApplication 类中的 run 函数中")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录应用的启动时间")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" startTime "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建应用的引导上下文")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主要做的事情是获取到之前加载的所有 bootstrappers，然后挨个执行其 initialize 方法来完成对引导启动器上下文的环境设置")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultBootstrapContext")]),t._v(" bootstrapContext "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createBootstrapContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureHeadlessProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 spring.factories 中获取所有的 SpringApplicationRunListeners")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认情况下，SpringBoot 里这里会有唯一一个 SpringApplicationRunListener，即 EventPublishingRunListener")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EventPublishingRunListener 在初始化的时候，会将 SpringApplication 中的 属性 listeners（即 ApplicationListener）赋值")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后在调用相关方法时，使用 Multicaster 广播给所有的 ApplicationListener。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplicationRunListeners")]),t._v(" listeners "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRunListeners")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历所有 listeners，调用其 starting 方法。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 广播 ApplicationStartingEvent。相当于通知所有的 ApplicationListener，应用正在 starting。")]),t._v("\n    listeners"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("starting")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bootstrapContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mainApplicationClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构建应用程序参数持有类")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationArguments")]),t._v(" applicationArguments "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultApplicationArguments")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建并配置好当前 SpringBoot 应用将要使用的环境；")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 广播 ApplicationEnvironmentPreparedEvent 事件，相当于通知所有的 ApplicationListener，应用环境准备好了")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableEnvironment")]),t._v(" environment "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareEnvironment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listeners"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bootstrapContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" applicationArguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureIgnoreBeanInfo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("environment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 控制台上打印 banner")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Banner")]),t._v(" printedBanner "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printBanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("environment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 SpringBoot 应用上下文。")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认情况下，这里创建的是 AnnotationConfigServletWebServerApplicationContext。")]),t._v("\n        context "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createApplicationContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setApplicationStartup")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("applicationStartup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备应用上下文，里面会依次调用之前创建的 ApplicationContextInitializer，对 context 进行初始化操作；")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 之后还会广播 ApplicationContextInitializedEvent 给所有的 listeners。")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后将 sources（默认为 primarySources，即应用的主类） 加载进上下文")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后广播 ApplicationPreparedEvent 事件，告诉 listeners，应用上下文已经准备好了。")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bootstrapContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" environment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listeners"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" applicationArguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" printedBanner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refresh 是非常关键的一步，里面会做很多事情，例如 BeanFactory 的设置，BeanFactoryPostProcessor 的执行，BeanPostProcessor 接口的执行，")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动化配置类的解析、条件注解的解析、国际化的初始化等等。具体在下面再单独讲解")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("refreshContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refresh 之后应该做的事情，目前是个空实现")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterRefresh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" applicationArguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算启动花的时间，并在日志中打印")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),t._v(" timeTakenToStartup "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofNanos")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" startTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logStartupInfo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StartupInfoLogger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mainApplicationClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("logStarted")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getApplicationLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeTakenToStartup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 广播 ApplicationStartedEvent 事件，通知所有 ApplicationListener，应用已经启动了")]),t._v("\n        listeners"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("started")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeTakenToStartup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用上下文中的 ApplicationRunner 和 CommandRunner 接口的实现类")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("callRunners")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" applicationArguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRunFailure")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listeners"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalStateException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算ready花的时间，并广播 ApplicationReadyEvent 事件至所有监听者 listeners")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),t._v(" timeTakenToReady "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofNanos")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" startTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        listeners"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ready")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeTakenToReady"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRunFailure")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalStateException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样 run 方法执行完毕后，Spring 容器初始化工作完毕，各种监听器、初始化器也做了相应工作。")]),t._v(" "),n("p",[t._v("下面具体看一下 "),n("code",[t._v("refreshContext(context)")]),t._v(" 这一步。")]),t._v(" "),n("p",[t._v("还是以 web 程序为例，这里对应的上下文为 "),n("code",[t._v("AnnotationConfigServletWebServerApplicationContext")]),t._v("。它的 refresh 方法调用了父类 "),n("code",[t._v("AbstractApplicationContext")]),t._v(" 的 refresh 方法。")]),t._v(" "),n("p",[t._v("下面首先给出 refresh 的主要代码，然后解释其中的主要方法。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalStateException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refresh 过程只能一个线程处理，不允许并发执行")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startupShutdownMonitor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StartupStep")]),t._v(" contextRefresh "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("applicationStartup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.context.refresh"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prepare this context for refreshing.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刷新前的准备，包括 设置flag、时间、初始化 properties 等。")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareRefresh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Tell the subclass to refresh the internal bean factory.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("obtainFreshBeanFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prepare the bean factory for use in this context.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareBeanFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Allows post-processing of the bean factory in context subclasses.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StartupStep")]),t._v(" beanPostProcess "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("applicationStartup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.context.beans.post-process"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invoke factory processors registered as beans in the context.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("invokeBeanFactoryPostProcessors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register bean processors that intercept bean creation.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerBeanPostProcessors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            beanPostProcess"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize message source for this context.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("initMessageSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize event multicaster for this context.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("initApplicationEventMulticaster")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize other special beans in specific context subclasses.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onRefresh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check for listener beans and register them.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerListeners")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Instantiate all remaining (non-lazy-init) singletons.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("finishBeanFactoryInitialization")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Last step: publish corresponding event.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("finishRefresh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isWarnEnabled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("warn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception encountered during context initialization - "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cancelling refresh attempt: "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Destroy already created singletons to avoid dangling resources.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroyBeans")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset 'active' flag.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cancelRefresh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Propagate exception to caller.")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset common introspection caches in Spring's core, since we")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// might not ever need metadata for singleton beans anymore...")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resetCommonCaches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            contextRefresh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_1-preparerefresh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-preparerefresh"}},[t._v("#")]),t._v(" 1. prepareRefresh")]),t._v(" "),n("ol",[n("li",[t._v("设置容器的启动时间，撤销关闭状态，开启活跃状态。")]),t._v(" "),n("li",[t._v("初始化属性源信息（Property）。")]),t._v(" "),n("li",[t._v("验证环境信息里一些必须存在的属性。")])]),t._v(" "),n("h3",{attrs:{id:"_2-preparebeanfactory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-preparebeanfactory"}},[t._v("#")]),t._v(" 2. prepareBeanFactory")]),t._v(" "),n("ol",[n("li",[t._v("设置 beanFactory 的类加载器为当前上下文的类加载器，添加属性编辑注册器（"),n("code",[t._v("PropertyEditorRegistrar")]),t._v("）")]),t._v(" "),n("li",[t._v("添加 ApplicationContextAwareProcessor 这个 BeanPostProcessor，并取消相关 7 个接口的自动注入，因为 ApplicationContextAwareProcessor 把这些接口的实现工作做了。ApplicationContextAwareProcessor 的作用是让 bean 在实现了 "),n("code",[t._v("EnvironmentAware")]),t._v(" 等 7 个接口后，可以感知到应用上下文的相关属性。")]),t._v(" "),n("li",[t._v("设置特殊类型对应的bean。BeanFactory 对应刚刚获取到的 beanFactory；ResourceLoader、ApplicationEventPublisher、ApplicationContext 这三个接口对应的 bean 都设置为当前上下文。")]),t._v(" "),n("li",[t._v("注册 ApplicationListenerDetector 这个 BeanPostProcessor。")]),t._v(" "),n("li",[t._v("注入一些其他信息的 bean，例如 environment、systemProperties 等。")])]),t._v(" "),n("h3",{attrs:{id:"_3-postprocessbeanfactory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-postprocessbeanfactory"}},[t._v("#")]),t._v(" 3. postProcessBeanFactory")]),t._v(" "),n("p",[t._v("准备好 beanFactory 后的一些后续操作，不同的上下文会执行不同的操作。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("GenericWebApplicationContext")]),t._v(" 会在 beanFactory 中添加 "),n("code",[t._v("ServletContextAwareProcessor")]),t._v("，该处理器用于处理实现了 "),n("code",[t._v("ServletContextAware")]),t._v(" 接口的 bean。这种类型的 bean 在初始化时，可以感知到 servletContext 和 servletConfig。")]),t._v(" "),n("li",[t._v("另外，"),n("code",[t._v("AnnotationConfigEmbeddedWebApplicationContext")]),t._v(" 对应的 postProcessBeanFactory方法为：")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用父类，即 GenericWebApplicationContext 对应的 postProcessBeanFactory 函数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看 basePackages 属性。如果设置了该属性，会使用 ClassPathBeanDefinitionScanner 去扫描 basePackages 包下的 bean 并注册")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectUtils")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("basePackages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scanner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("scan")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("basePackages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看 annotatedClasses 属性，如果设置了会使用 AnnotatedBeanDefinitionReader 去注册这些 bean")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotatedClasses"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassUtils")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toClassArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotatedClasses"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_4-invokebeanfactorypostprocessor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-invokebeanfactorypostprocessor"}},[t._v("#")]),t._v(" 4. invokeBeanFactoryPostProcessor")]),t._v(" "),n("p",[t._v("在 Spring 上下文中找出实现了 BeanFactoryPostProcessor 接口的 processors 并执行。\nSpring 上下文会委托给 PostProcessorRegistrationDelegate 的 invokeBeanFactoryPostProcessors 方法执行。")]),t._v(" "),n("blockquote",[n("p",[t._v("BeanFactoryPostProcessor 的作用是用来修改 Spring 上下文中已经存在的 bean 的定义，使用 ConfigurableListableBeanFactory 对 bean 进行处理。")])]),t._v(" "),n("p",[t._v("这里的处理逻辑如下。")]),t._v(" "),n("p",[t._v("首先从 Spring 上下文中找出类型为 "),n("code",[t._v("BeanDefinitionRegistryPostProcessor")]),t._v(" 的 bean（这些 processor 是在容器刚创建时通过构造 AnnotatedBeanDefinitionReader 的时候注册到容器中的），然后按照优先级分别执行。优先级的逻辑如下：")]),t._v(" "),n("ol",[n("li",[t._v("先把实现了 PriorityOrdered 接口的 BeanDefinitionRegistryPostProcessor 全部找出来，排序后依次执行其 "),n("code",[t._v("postProcessBeanDefinitionRegistry")]),t._v(" 方法。")]),t._v(" "),n("li",[t._v("把实现了 Ordered 接口的 BeanDefinitionRegistryPostProcessor 全部找出来，排序后依次执行。")]),t._v(" "),n("li",[t._v("剩下的 BeanDefinitionRegistryPostProcessor 全部找出来并依次执行。")]),t._v(" "),n("li",[t._v("然后执行以上所有 processor 的 "),n("code",[t._v("postProcessBeanFactory")]),t._v(" 接口（因为 "),n("code",[t._v("BeanDefinitionRegistryPostProcessor")]),t._v(" 接口是 "),n("code",[t._v("BeanFactoryPostProcessor")]),t._v(" 的子类，所以一定可以找到 "),n("code",[t._v("postProcessBeanFactory")]),t._v(" 接口）。")])]),t._v(" "),n("p",[t._v("接下来从 Spring 上下文中找出类型为 "),n("code",[t._v("BeanFactoryPostProcessor")]),t._v(" 的 bean（会忽略掉上面的 bean），然后执行。\n这里的查找规则与上面的 BeanDefinitionRegistryPostProcessor 相同，先找 PriorityOrdered，再找 Ordered，最后是两者都没有的。")]),t._v(" "),n("p",[t._v("这里需要重点说明的是 "),n("code",[t._v("ConfigurationClassPostProcessor")]),t._v(" 这个 processor，因为这个 processor 是处理 "),n("code",[t._v("@Configuration")]),t._v(" 注解的，在 SpringBoot 中非常重要。")]),t._v(" "),n("p",[n("code",[t._v("ConfigurationClassPostProcessor")]),t._v(" 是优先级最高的 processor（因为其实现了 PriorityOrdered 接口）。")]),t._v(" "),n("p",[t._v("这个 processor 会去 BeanFactory 中找出所有带有 @Configuration 注解的 bean，然后使用 ConfigurationClassParser 去解析这个类。")]),t._v(" "),n("p",[t._v("ConfigurationClassParser 内部有个 "),n("code",[t._v("Map<ConfigurationClass, ConfigurationClass>")]),t._v(" 类型的 configurationClasses，用于保存已经解析的 Configuration 类。\nConfigurationClass 是一个对要解析的配置类的封装，内部存储了配置类的注解信息、被 @Bean 注解修饰的方法、@ImportResource 注解修饰的信息、ImportBeanDefinitionRegistrar 等。")]),t._v(" "),n("blockquote",[n("p",[t._v("这里 ConfigurationClassPostProcessor 最先被处理还有另外一个原因是如果程序中有自定义的 BeanFactoryPostProcessor，那么这个 PostProcessor 首先得通过 ConfigurationClassPostProcessor 被解析出来，然后才能被 Spring 容器找到并执行。(ConfigurationClassPostProcessor 不先执行的话，这个 Processor 是不会被解析的，不会被解析的话也就不会执行了)。")])]),t._v(" "),n("p",[t._v("在简单的程序中，只有主类 SpringBootExampleApplication 有 @Configuration 注解（@SpringBootApplication 中包含此注解），所以这个配置类会被 ConfigurationClassParser 解析。\n解析过程如下：")]),t._v(" "),n("ol",[n("li",[t._v("处理 @PropertySource 注解，进行配置信息的解析。")]),t._v(" "),n("li",[t._v("处理 @ComponentScan 注解，使用 ComponentScanAnnotationParser 扫描 basePackage 下需要解析的类 (@SpringBootApplication 注解也包括了 @ComponentScan 注解，只不过 basePackages 是空的，空的话会去获取当前 @Configuration 修饰的类所在的包)，并注册到 BeanFactory 中(这个时候bean并没有进行实例化，而只是进行了注册。具体的实例化在 finishBeanFactoryInitialization 方法中执行)。对于扫描出来的类，递归解析。")]),t._v(" "),n("li",[t._v("处理 @Import 注解，先递归找出所有注解，然后过滤出只有 @Import 注解的类，得到 @Import 注解的值。找出所有的 @Import 注解后，开始处理逻辑\n"),n("ol",[n("li",[t._v("遍历这些 "),n("code",[t._v("@Import")]),t._v(" 注解内部的属性类集合。")]),t._v(" "),n("li",[t._v("如果这个类是 "),n("code",[t._v("ImportSelector")]),t._v(" 接口的实现类，实例化这个 ImportSelector。如果这个类还是 "),n("code",[t._v("DeferredImportSelector")]),t._v(" 接口的实现类，那么加入 ConfigurationClassParser 的 "),n("code",[t._v("deferredImportSelectors")]),t._v(" 属性中，让第 6 步处理；否则调用 ImportSelector 的 "),n("code",[t._v("selectImports")]),t._v(" 方法得到需要 import 的类，然后对这些类递归做 @Import 注解的处理。")]),t._v(" "),n("li",[t._v("如果这个类是 "),n("code",[t._v("ImportBeanDefinitionRegistrar")]),t._v(" 接口的实现类，设置到配置类的 importBeanDefinitionRegistrars 属性中。")]),t._v(" "),n("li",[t._v("其他情况，把这个类加入到 configurationClassParser 的 importStack（队列）属性中，然后把这个类当作 @Configuration 修饰的类，递归重头开始解析这个类。")])])]),t._v(" "),n("li",[t._v("处理 @ImportResource 注解：获取 @ImportResource 注解的 locations 属性，得到资源文件的地址信息，然后遍历这些资源文件，并把它们添加到配置类的 importedResources 属性中")]),t._v(" "),n("li",[t._v("处理 @Bean 注解：获取被 @Bean 修饰的方法，然后添加到配置类的 beanMethods 属性中")]),t._v(" "),n("li",[t._v("处理 DeferredImportSelector：处理第 3 步 @Import 产生的 deferredImportSelector，调用其 Group 类的 process 方法，找到需要 import 的类，然后调用第 3 步相同的逻辑进行处理（注意是所有的配置类处理完之后才会执行这一步）。")])]),t._v(" "),n("blockquote",[n("p",[t._v("比如查找 @SpringBootApplication 注解的 @Import 注解数据的话，首先发现 @SpringBootApplication 不是一个 @Import 注解，然后递归调用修饰了 @SpringBootApplication 的注解，发现有个 @EnableAutoConfiguration 注解，再次递归发现被 @Import(AutoConfigurationImportSelector.class) 修饰，还有 @AutoConfigurationPackage 注解，再次递归该注解，发现被 @Import(AutoConfigurationPackages.Registrar.class) 修饰。所以 @SpringBootApplication 对应的 @Import 注解有两个，分别是 @Import(AutoConfigurationPackages.Registrar.class) 和 @Import(EnableAutoConfigurationImportSelector.class)。找出所有的 "),n("code",[t._v("@Import")]),t._v(" 注解后，开始处理逻辑。")])]),t._v(" "),n("p",[t._v("这里 @SpringBootApplication 注解被 @EnableAutoConfiguration 修饰，@EnableAutoConfiguration 注解被 @Import(AutoConfigurationImportSelector.class) 修饰。\n所以在第 3 步中，会找出这个被 @Import 修饰的类 "),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(385),alt:"spring-boot-import"}})]),t._v(" "),n("p",[t._v("这个类刚好实现了 "),n("code",[t._v("DeferredImportSelector")]),t._v(" 接口，因此会在第 6 步被执行。\n第 6 步 selectImport 得到的类就是自动化配置类。")]),t._v(" "),n("p",[t._v("需要注意的是，"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v(" 由于实现了 "),n("code",[t._v("DeferredImportSelector")]),t._v(" 接口，并不是直接调用其 "),n("code",[t._v("selectImport")]),t._v(" 方法，而是调用其子类 "),n("code",[t._v("AutoConfigurationGroup")]),t._v(" 的 "),n("code",[t._v("process")]),t._v(" 方法，然后在其中调用 "),n("code",[t._v("getAutoConfigurationEntry")]),t._v(" 来读取自动配置类的。")]),t._v(" "),n("blockquote",[n("p",[t._v("因此直接在 "),n("code",[t._v("AutoConfigurationImportSelector$selectImport")]),t._v(" 方法里打断点时，会发现执行不到。比较神奇。")])]),t._v(" "),n("p",[t._v("在当前 processor 中，ConfigurationClassParser 解析完配置类后，会将解析完的类存放在其 configurationClasses 属性中。\n然后，processor 会创建一个 ConfigurationClassBeanDefinitionReader 去解析这些配置类。")]),t._v(" "),n("p",[t._v("下面这段代码是 ConfigurationClassBeanDefinitionReader 解析配置类的代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitions")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurationClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" configurationModel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TrackedConditionEvaluator")]),t._v(" trackedConditionEvaluator "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TrackedConditionEvaluator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurationClass")]),t._v(" configClass "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" configurationModel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对每个配置类，调用 loadBeanDefinitionsForConfigurationClass 方法")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitionsForConfigurationClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" trackedConditionEvaluator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitionsForConfigurationClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurationClass")]),t._v(" configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TrackedConditionEvaluator")]),t._v(" trackedConditionEvaluator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用条件注解判断是否需要跳过这个配置类")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("trackedConditionEvaluator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldSkip")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳过配置类的话，在Spring容器中移除bean的注册")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringUtils")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasLength")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("registry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsBeanDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("registry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeBeanDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("importRegistry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeImportingClassFor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMetadata")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isImported")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果自身是被 @Import 注释所 import 的，注册自己")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerBeanDefinitionForImportedConfigurationClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册方法中被 @Bean 注解修饰的bean")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanMethod")]),t._v(" beanMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanMethods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitionsForBeanMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册 @ImportResource 注解注释的资源文件中的 bean")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitionsFromImportedResources")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getImportedResources")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册 @Import 注解中的 ImportBeanDefinitionRegistrar 接口的 registerBeanDefinitions")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitionsFromRegistrars")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getImportBeanDefinitionRegistrars")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("稍微总结一下，invokeBeanFactoryProcessors 方法总的来说就是从 Spring 上下文中找出 BeanDefinitionRegistryPostProcessor 和 BeanFactoryPostProcessor 接口的实现类，并按照一定顺序执行。")]),t._v(" "),n("p",[t._v("其中 ConfigurationClassPostProcessor 这个 BeanDefinitionRegistryPostProcessor 优先级最高，它会对项目中的 @Configuration 注解修饰的类（还有 @Component，@ComponentScan，@Import，@ImportResource 修饰的类也会被处理）进行解析，解析完成后把这些 bean 注册到 BeanFactory 中。")]),t._v(" "),n("blockquote",[n("p",[t._v("需要注意的是，这个时候注册进来的 bean 还没有被实例化。")])]),t._v(" "),n("p",[t._v("下图是对 ConfigurationClassPostProcessor 的总结：\n"),n("img",{attrs:{src:a(386),alt:"configuration-annotation-process"}})]),t._v(" "),n("h3",{attrs:{id:"_5-registerbeanpostprocessors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-registerbeanpostprocessors"}},[t._v("#")]),t._v(" 5. registerBeanPostProcessors")]),t._v(" "),n("p",[t._v("这一步的主要目的是从 Spring 上下文中找出实现了 BeanPostProcessor 接口的 bean，并设置到 beanFactory 的 "),n("code",[t._v("beanPostProcessors")]),t._v(" 属性中。\n之后 bean 被实例化的时候，相关 BeanPostProcessor 会被调用。")]),t._v(" "),n("p",[t._v("该方法委托给了 PostProcessorRegistrationDelegate 类的 "),n("code",[t._v("registerBeanPostProcessors")]),t._v(" 方法执行。这里的过程与 "),n("code",[t._v("invokeBeanFactoryPostProcessors")]),t._v(" 类似：")]),t._v(" "),n("ol",[n("li",[t._v("先找出实现了 PriorityOrdered 接口的 BeanPostProcessor，然后排序，然后加载到 BeanFactory 的 BeanPostProcessor 集合中。")]),t._v(" "),n("li",[t._v("再找出实现了 Ordered 接口的 BeanPostProcessor，然后排序，然后加载到 BeanFactory 的 BeanPostProcessor 集合中。")]),t._v(" "),n("li",[t._v("再找出剩下的 BeanPostProcessors，排序后加入到 BeanFactory 的 BeanPostProcessor 集合中。")])]),t._v(" "),n("p",[t._v("在注册之前，beanFactory 里有 4 个 beanPostProcessors，它们是：\n"),n("img",{attrs:{src:a(387),alt:"before-register-post-processor"}})]),t._v(" "),n("p",[t._v("注册之后，beanFactory 里有 11 个 beanPostProcessors，它们是：\n"),n("img",{attrs:{src:a(388),alt:"after-register-post-processor"}})]),t._v(" "),n("p",[t._v("这里的 beanPostProcessors 包括 AutowiredAnnotationBeanPostProcessor（用来处理被 @Autowired 注释修饰的 bean） 等。")]),t._v(" "),n("h3",{attrs:{id:"_6-initmessagesource"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-initmessagesource"}},[t._v("#")]),t._v(" 6. initMessageSource")]),t._v(" "),n("p",[t._v("配置 beanFactory 的 "),n("code",[t._v("messageSource")]),t._v(" 属性，可以用来做类似国际化的事情。")]),t._v(" "),n("h3",{attrs:{id:"_7-initapplicationeventmulticaster"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-initapplicationeventmulticaster"}},[t._v("#")]),t._v(" 7. initApplicationEventMulticaster")]),t._v(" "),n("p",[t._v("在 Spring 上下文中初始化事件广播器，事件广播器用于事件的发布。")]),t._v(" "),n("p",[t._v("具体来说，在 Spring 上下文中寻找名称为 applicationEventMulticaster 的 bean：")]),t._v(" "),n("ul",[n("li",[t._v("找到的话，将其设置为 beanFactory 的 "),n("code",[t._v("applicationEventMulticaster")]),t._v(" 属性。")]),t._v(" "),n("li",[t._v("如果找不到该 bean 的话，则 new 一个 SimpleApplicationEventMulticaster 并设置为 "),n("code",[t._v("applicationEventMulticaster")]),t._v("。")])]),t._v(" "),n("h3",{attrs:{id:"_8-onrefresh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-onrefresh"}},[t._v("#")]),t._v(" 8. onRefresh")]),t._v(" "),n("p",[t._v("根据 context 的类型，创建一些特殊的 bean。")]),t._v(" "),n("p",[t._v("例如，web 程序的上下文 AnnotationConfigEmbeddedWebApplicationContext 会调用 createEmbeddedServletContainer 方法去创建内置的 Servlet 容器。")]),t._v(" "),n("p",[t._v("目前 SpringBoot 支持的内置容器有：")]),t._v(" "),n("ul",[n("li",[t._v("Tomcat、Jetty、Netty、Undertow")])]),t._v(" "),n("h3",{attrs:{id:"_9-registerlisteners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-registerlisteners"}},[t._v("#")]),t._v(" 9. registerListeners")]),t._v(" "),n("p",[t._v("把 Spring 上下文中的应用监听器（applicationListeners）都注册到事件广播器（applicationEventMulticater）中。")]),t._v(" "),n("p",[t._v("然后在 Spring 上下文的 beanFactory 中寻找所有实现了 ApplicationListener 接口的 bean，将它们也加入到 applicationEventMulticater 中。（注意这里并不对它们做实例化，仅仅把 beanName 加入进去）")]),t._v(" "),n("h3",{attrs:{id:"_10-finishbeanfactoryinitialization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-finishbeanfactoryinitialization"}},[t._v("#")]),t._v(" 10. finishBeanFactoryInitialization")]),t._v(" "),n("p",[t._v("实例化 beanFactory 中已经被注册但是还没有实例化的所有 bean。（除了懒加载的 bean）。")]),t._v(" "),n("p",[t._v("例如上面 "),n("code",[t._v("invokeBeanFactoryPostProcessors")]),t._v(" 方法根据各种注解解析出来的 bean，这个时候都会被实例化。")]),t._v(" "),n("p",[t._v("实例化的过程中，beanPostProcessor 开始起作用。")]),t._v(" "),n("h3",{attrs:{id:"_11-finishrefresh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-finishrefresh"}},[t._v("#")]),t._v(" 11. finishRefresh")]),t._v(" "),n("p",[t._v("refresh 结束阶段需要做的事情。")]),t._v(" "),n("ol",[n("li",[t._v("初始化生命周期处理器，并设置到 Spring 上下文的 "),n("code",[t._v("lifecycleProcessor")]),t._v(" 属性中。")]),t._v(" "),n("li",[t._v("调用 "),n("code",[t._v("lifecycleProcessor")]),t._v(" 的 "),n("code",[t._v("onRefresh")]),t._v(" 方法，这个方法会找出 Spring 上下文中实现了 SmartLifecycle 接口的类，并进行 start 方法的调用。")]),t._v(" "),n("li",[t._v("发布 ContextRefreshedEvent 事件告知 applicationListeners，进行相应操作。")]),t._v(" "),n("li",[t._v("调用 LiveBeansView 的 "),n("code",[t._v("registerApplicationContext")]),t._v(" 方法：如果设置了 JMX 相关的属性，则就调用该方法。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);