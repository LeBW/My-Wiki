(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{272:function(t,v,_){"use strict";_.r(v);var a=_(38),e=Object(a.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"理论知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#理论知识","aria-hidden":"true"}},[t._v("#")]),t._v(" 理论知识")]),t._v(" "),_("h2",{attrs:{id:"事物"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事物","aria-hidden":"true"}},[t._v("#")]),t._v(" 事物")]),t._v(" "),_("p",[t._v("定义： 一系列在数据库上执行的行为。事物是DBMS中最基础的单位；事物不可分割。")]),t._v(" "),_("h3",{attrs:{id:"事物的四大特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事物的四大特性","aria-hidden":"true"}},[t._v("#")]),t._v(" 事物的四大特性")]),t._v(" "),_("ol",[_("li",[t._v("原子性。事物包含的所有操作要么全部成功，要么全部失败回滚。")]),t._v(" "),_("li",[t._v("一致性。事物必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事物执行之前和执行之后必须处于一致性状态。举例：假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。")]),t._v(" "),_("li",[t._v("隔离性。隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。")]),t._v(" "),_("li",[t._v("持久性。持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")])]),t._v(" "),_("p",[t._v("下面重点介绍一下隔离性。没有隔离性会造成以下问题：")]),t._v(" "),_("ol",[_("li",[t._v("脏读。脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。")]),t._v(" "),_("li",[t._v("不可重复读。不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发生了不可重复读。不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。")]),t._v(" "),_("li",[t._v("幻读（虚读）。幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。")])]),t._v(" "),_("h2",{attrs:{id:"数据库的五个范式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库的五个范式","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据库的五个范式")]),t._v(" "),_("ol",[_("li",[t._v("1NF（第一范式）：数据库表中的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。")]),t._v(" "),_("li",[t._v("2NF（第二范式）：如果关系模型R为第一范式，并且R中的每一个非主属性完全函数依赖于R的某个候选键，则称R为第二范式模式(如果A是关系模式R的候选键的一个属性，则称A是R的主属性，否则称A是R的非主属性)。")]),t._v(" "),_("li",[t._v("3NF（第三范式）：如果关系模型R是第二范式，且每个非主属性都不传递依赖于R的候选键，则称R是第三范式的模式。")]),t._v(" "),_("li",[t._v("BCNF范式。如果关系模型R是第一范式，且每个属性都不传递依赖于R的候选键，那么称R为BCNF的模式。")]),t._v(" "),_("li",[t._v("4NF（第四范式）：设R是一个关系模型，D是R上的多值依赖集合。如果D中存在凡多值依赖X->Y时，X必是R的超键，那么称R是第四范式的模式。")])]),t._v(" "),_("h2",{attrs:{id:"索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引","aria-hidden":"true"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),_("p",[t._v("定义：索引是对数据库表中一个或多个列（例如，employee 表的姓名 (name) 列）的值进行排序的结构。实现：B+树。")]),t._v(" "),_("p",[t._v("一般来说，应该在这些列上创建索引：")]),t._v(" "),_("ul",[_("li",[t._v("经常需要搜索的列上，可以加快搜索的速度")]),t._v(" "),_("li",[t._v("作为主键的列上，强制该列的唯一性和组织表中数据的排列结构")]),t._v(" "),_("li",[t._v("在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度")])]),t._v(" "),_("blockquote",[_("p",[t._v("问题： 如何知道索引是否起作用？")])]),t._v(" "),_("blockquote",[_("p",[t._v("答：在Mysql中，explain显示了如何使用索引来处理select语句及连接表。可以帮助选择更好的索引。例如: explain select xxx from xxx")])])])},[],!1,null,null,null);v.default=e.exports}}]);